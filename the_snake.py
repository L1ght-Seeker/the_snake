from random import randint

import pygame as pg

# –†–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞ –∏ —Å–µ—Ç–∫–∞
SCREEN_WIDTH, SCREEN_HEIGHT = 640, 480
GRID_SIZE = 20
GRID_WIDTH = SCREEN_WIDTH // GRID_SIZE
GRID_HEIGHT = SCREEN_HEIGHT // GRID_SIZE

# –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
UP = (0, -1)
DOWN = (0, 1)
LEFT = (-1, 0)
RIGHT = (1, 0)

# –¶–≤–µ—Ç–∞
BOARD_BACKGROUND_COLOR = (0, 0, 0)
SNAKE_BODY_COLOR = (0, 250, 0)
APPLE_BODY_COLOR = (255, 0, 0)
BORDER_COLOR = (93, 216, 228)

# –°–∫–æ—Ä–æ—Å—Ç—å –∏–≥—Ä—ã
SPEED = 10

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –æ–∫–Ω–∞
screen = pg.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT), 0, 32)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
pg.display.set_caption('–ó–º–µ–π–∫–∞')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
clock = pg.time.Clock()


# –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –∏–≥—Ä–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
class GameObject:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∏–≥—Ä–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤."""

    def __init__(self, body_color=None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–≥—Ä–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã."""
        self.position = (SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2)
        self.body_color = body_color or BOARD_BACKGROUND_COLOR

    def draw(self):
        """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –æ–±—ä–µ–∫—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ."""


# –ö–ª–∞—Å—Å Apple
class Apple(GameObject):
    """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —è–±–ª–æ–∫–æ –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ."""

    def __init__(self, occupied_positions=None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —è–±–ª–æ–∫–æ –∏ —Å—Ç–∞–≤–∏—Ç –µ–≥–æ –Ω–∞ —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–∑–∏—Ü–∏—é."""
        super().__init__(body_color=APPLE_BODY_COLOR)
        self.randomize_position(occupied_positions or [])

    def randomize_position(self, occupied_positions):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–∑–∏—Ü–∏—é —è–±–ª–æ–∫–∞."""
        while True:
            self.position = (
                randint(0, GRID_WIDTH - 1) * GRID_SIZE,
                randint(0, GRID_HEIGHT - 1) * GRID_SIZE
            )
            if self.position not in occupied_positions:
                break

    def draw(self):
        """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —è–±–ª–æ–∫–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ."""
        apple_rect = pg.Rect(self.position, (GRID_SIZE, GRID_SIZE))
        pg.draw.rect(screen, self.body_color, apple_rect)
        pg.draw.rect(screen, BORDER_COLOR, apple_rect, 1)


# –ö–ª–∞—Å—Å Snake
class Snake(GameObject):
    """–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∑–º–µ–∏ –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–º–µ—é –∏ –∑–∞–¥–∞—ë—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã."""
        super().__init__(body_color=SNAKE_BODY_COLOR)
        self.reset()
        self.direction = RIGHT  # –ù–∞—á–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–Ω —Ç—É–¥–∞ üëâ

    def reset(self):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–º–µ–∏."""
        self.positions = [(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2)]
        self.length = 1
        self.last = None

    def get_head_position(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –≥–æ–ª–æ–≤—ã –∑–º–µ–∏."""
        return self.positions[0]

    def move(self):
        """–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–º–µ–∏."""
        head_x, head_y = self.get_head_position()
        dir_x, dir_y = self.direction
        self.positions.insert(
            0,
            ((head_x + dir_x * GRID_SIZE) % SCREEN_WIDTH,
             (head_y + dir_y * GRID_SIZE) % SCREEN_HEIGHT),
        )
        self.last = (
            self.positions.pop() if len(self.positions) > self.length else None
        )

    def draw(self):
        """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∑–º–µ—é –Ω–∞ —ç–∫—Ä–∞–Ω–µ."""
        for pos in self.positions:
            segment_rect = pg.Rect(pos, (GRID_SIZE, GRID_SIZE))
            pg.draw.rect(screen, self.body_color, segment_rect)
            pg.draw.rect(screen, BORDER_COLOR, segment_rect, 1)
        if self.last is not None:
            last_rect = pg.Rect(self.last, (GRID_SIZE, GRID_SIZE))
            pg.draw.rect(screen, BOARD_BACKGROUND_COLOR, last_rect)

    def update_direction(self, new_dir):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç —Ç–µ–∫—É—â–µ–º—É.

        :param new_dir: –ù–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        """
        opposite_dirs = {UP: DOWN, DOWN: UP, LEFT: RIGHT, RIGHT: LEFT}
        if new_dir != opposite_dirs[self.direction]:
            self.direction = new_dir


def handle_keys(event, snake):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à."""
    if event.type == pg.KEYDOWN:
        if event.key == pg.K_ESCAPE:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à–∏ ESC!!!! —É—Ä–∞-—É—Ä–∞ :3
            pg.quit()
            quit()
        elif event.key == pg.K_UP:
            snake.update_direction(UP)
        elif event.key == pg.K_DOWN:
            snake.update_direction(DOWN)
        elif event.key == pg.K_LEFT:
            snake.update_direction(LEFT)
        elif event.key == pg.K_RIGHT:
            snake.update_direction(RIGHT)


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–≥—Ä—ã
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã."""
    snake = Snake()
    apple = Apple(snake.positions)

    while True:
        screen.fill(BOARD_BACKGROUND_COLOR)

        clock.tick(SPEED)
        for event in pg.event.get():
            handle_keys(event, snake)

        snake.move()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ —è–±–ª–æ–∫–æ
        if snake.get_head_position() == apple.position:
            snake.length += 1
            apple.randomize_position(snake.positions)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å —Ç–µ–ª–æ–º –∑–º–µ–∏
        if snake.get_head_position() in snake.positions[1:]:
            snake.reset()
            apple.randomize_position(snake.positions)

        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        snake.draw()
        apple.draw()
        pg.display.flip()


if __name__ == '__main__':
    main()

    # P.S –ù–∞ —Ç—ã –Ω–µ –ø—Ä–æ—Ç–∏–≤, –∑–∞–±—ã–ª —Å–∫–∞–∑–∞—Ç—å)
    # –ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –∫–∞–∫ —Ç—ã –≤—Å—ë –æ–±—ä—è—Å–Ω—è–µ—à—å)
    # –ñ–µ–ª–∞—é —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!
    # –í—ã—Ö–æ–¥ –Ω–∞ Esc)
